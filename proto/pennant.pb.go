// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pennant.proto

/*
Package proto is a generated protocol buffer package.

It is generated from these files:
	pennant.proto

It has these top-level messages:
	FlagRequest
	FlagReply
*/
package proto

import proto1 "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto1.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto1.ProtoPackageIsVersion2 // please upgrade the proto package

// The request message containing the name of the flag
// and whether it's enabled.
type FlagRequest struct {
	Name    string             `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Strings map[string]string  `protobuf:"bytes,2,rep,name=Strings" json:"Strings,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Numbers map[string]float64 `protobuf:"bytes,3,rep,name=Numbers" json:"Numbers,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
}

func (m *FlagRequest) Reset()                    { *m = FlagRequest{} }
func (m *FlagRequest) String() string            { return proto1.CompactTextString(m) }
func (*FlagRequest) ProtoMessage()               {}
func (*FlagRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *FlagRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FlagRequest) GetStrings() map[string]string {
	if m != nil {
		return m.Strings
	}
	return nil
}

func (m *FlagRequest) GetNumbers() map[string]float64 {
	if m != nil {
		return m.Numbers
	}
	return nil
}

// The response message containing the flat value
type FlagReply struct {
	Status  int32 `protobuf:"varint,1,opt,name=Status" json:"Status,omitempty"`
	Enabled bool  `protobuf:"varint,2,opt,name=Enabled" json:"Enabled,omitempty"`
}

func (m *FlagReply) Reset()                    { *m = FlagReply{} }
func (m *FlagReply) String() string            { return proto1.CompactTextString(m) }
func (*FlagReply) ProtoMessage()               {}
func (*FlagReply) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *FlagReply) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *FlagReply) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func init() {
	proto1.RegisterType((*FlagRequest)(nil), "proto.FlagRequest")
	proto1.RegisterType((*FlagReply)(nil), "proto.FlagReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Pennant service

type PennantClient interface {
	// Gets a value for a flag
	GetFlagValue(ctx context.Context, in *FlagRequest, opts ...grpc.CallOption) (*FlagReply, error)
}

type pennantClient struct {
	cc *grpc.ClientConn
}

func NewPennantClient(cc *grpc.ClientConn) PennantClient {
	return &pennantClient{cc}
}

func (c *pennantClient) GetFlagValue(ctx context.Context, in *FlagRequest, opts ...grpc.CallOption) (*FlagReply, error) {
	out := new(FlagReply)
	err := grpc.Invoke(ctx, "/proto.Pennant/GetFlagValue", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Pennant service

type PennantServer interface {
	// Gets a value for a flag
	GetFlagValue(context.Context, *FlagRequest) (*FlagReply, error)
}

func RegisterPennantServer(s *grpc.Server, srv PennantServer) {
	s.RegisterService(&_Pennant_serviceDesc, srv)
}

func _Pennant_GetFlagValue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PennantServer).GetFlagValue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Pennant/GetFlagValue",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PennantServer).GetFlagValue(ctx, req.(*FlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pennant_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Pennant",
	HandlerType: (*PennantServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetFlagValue",
			Handler:    _Pennant_GetFlagValue_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pennant.proto",
}

func init() { proto1.RegisterFile("pennant.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x84, 0x91, 0x41, 0x4b, 0xf3, 0x40,
	0x10, 0x86, 0xbf, 0x24, 0x5f, 0x1a, 0x3b, 0x8d, 0x50, 0x06, 0x91, 0x50, 0x0f, 0x96, 0x9c, 0x7a,
	0x31, 0x87, 0x0a, 0xa2, 0x05, 0x0f, 0x16, 0xaa, 0xb7, 0x12, 0x52, 0xf0, 0xbe, 0x69, 0xc7, 0x58,
	0xba, 0xdd, 0xa4, 0xc9, 0x46, 0xc8, 0xaf, 0xf0, 0x2f, 0xcb, 0x6e, 0x36, 0x10, 0x11, 0xf1, 0xb4,
	0xf3, 0x0e, 0xf3, 0x3c, 0xcc, 0xee, 0xc2, 0x79, 0x41, 0x42, 0x30, 0x21, 0xa3, 0xa2, 0xcc, 0x65,
	0x8e, 0xae, 0x3e, 0xc2, 0x4f, 0x1b, 0x46, 0xcf, 0x9c, 0x65, 0x09, 0x9d, 0x6a, 0xaa, 0x24, 0x22,
	0xfc, 0x5f, 0xb3, 0x23, 0x05, 0xd6, 0xd4, 0x9a, 0x0d, 0x13, 0x5d, 0xe3, 0x03, 0x78, 0x1b, 0x59,
	0xee, 0x45, 0x56, 0x05, 0xf6, 0xd4, 0x99, 0x8d, 0xe6, 0xd7, 0xad, 0x23, 0xea, 0x81, 0x91, 0x99,
	0x58, 0x09, 0x59, 0x36, 0x49, 0x37, 0xaf, 0xd0, 0x75, 0x7d, 0x4c, 0xa9, 0xac, 0x02, 0xe7, 0x57,
	0xd4, 0x4c, 0x18, 0xd4, 0xa4, 0xc9, 0x02, 0xfc, 0xbe, 0x13, 0xc7, 0xe0, 0x1c, 0xa8, 0x31, 0x8b,
	0xa9, 0x12, 0x2f, 0xc0, 0xfd, 0x60, 0xbc, 0xa6, 0xc0, 0xd6, 0xbd, 0x36, 0x2c, 0xec, 0x7b, 0x4b,
	0xb1, 0x7d, 0xe9, 0x5f, 0xac, 0xd5, 0x63, 0xc3, 0x47, 0x18, 0xb6, 0xcb, 0x15, 0xbc, 0xc1, 0x4b,
	0x18, 0x6c, 0x24, 0x93, 0x75, 0xa5, 0x59, 0x37, 0x31, 0x09, 0x03, 0xf0, 0x56, 0x82, 0xa5, 0x9c,
	0x76, 0x5a, 0x70, 0x96, 0x74, 0x71, 0xfe, 0x04, 0x5e, 0xdc, 0x3e, 0x34, 0xde, 0x81, 0xff, 0x42,
	0x52, 0xc9, 0x5e, 0x95, 0x1d, 0xf1, 0xe7, 0xdd, 0x27, 0xe3, 0x6f, 0xbd, 0x82, 0x37, 0xe1, 0xbf,
	0xe5, 0x0d, 0x5c, 0xed, 0xf3, 0xe8, 0x54, 0xb3, 0x5d, 0xc9, 0xa2, 0xee, 0xd7, 0xde, 0x38, 0xcb,
	0xb6, 0xef, 0xb4, 0x3d, 0x2c, 0x7d, 0xe3, 0x8f, 0x15, 0x18, 0x5b, 0xe9, 0x40, 0x1b, 0x6e, 0xbf,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xad, 0xa4, 0x67, 0xc1, 0xe1, 0x01, 0x00, 0x00,
}
